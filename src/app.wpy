<style lang="less">
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
.layout{
  display: flex;
  flex-direction: row;
}
.cells {
  background-color: #FFFFFF;
  font-size: 17px;
  position: relative;
  overflow: hidden;
  line-height: 1.4em;
  .cell {
    padding: 16rpx;
    position: relative;
    display: flex;
    align-items: center;
    .label {
      display: block;
      width: 185rpx;
      word-wrap: break-word;
      word-break: break-all;
    }
    .input {
      width: 100%;
      border: 0;
      outline: 0;
      background-color: transparent;
      font-size: inherit;
      color: inherit;
      height: 1.4em;
      line-height: 1.4em;
    }
  }
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'

import { setStore } from 'wepy-redux'
import configStore from './store'

const store = configStore()
setStore(store)

export default class extends wepy.app {
  config = {
    pages: [
      'pages/index',
      'pages/income',
      'pages/outlay',
      'pages/property',
      'pages/debt',
      'pages/home'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: 'WeChat',
      navigationBarTextStyle: 'black'
    }
  }

  globalData = {
    userInfo: null
  }

  constructor () {
    super()
    this.use('requestfix')
  }

  onLaunch() {
    this.testAsync()
  }

  sleep (s) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('promise resolved')
      }, s * 1000)
    })
  }

  async testAsync () {
    await this.sleep(3)
  }

  getUserInfo(cb) {
    const that = this
    if (this.globalData.userInfo) {
      return this.globalData.userInfo
    }
    wepy.getUserInfo({
      success (res) {
        that.globalData.userInfo = res.userInfo
        cb && cb(res.userInfo)
      }
    })
  }
}
</script>
